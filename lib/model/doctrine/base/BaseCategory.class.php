<?php

/**
 * BaseCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $restaurant_id
 * @property string $name
 * @property Restaurant $Restaurant
 * @property Doctrine_Collection $Categories
 * 
 * @method integer             getRestaurantId()  Returns the current record's "restaurant_id" value
 * @method string              getName()          Returns the current record's "name" value
 * @method Restaurant          getRestaurant()    Returns the current record's "Restaurant" value
 * @method Doctrine_Collection getCategories()    Returns the current record's "Categories" collection
 * @method Category            setRestaurantId()  Sets the current record's "restaurant_id" value
 * @method Category            setName()          Sets the current record's "name" value
 * @method Category            setRestaurant()    Sets the current record's "Restaurant" value
 * @method Category            setCategories()    Sets the current record's "Categories" collection
 * 
 * @package    test
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('category');
        $this->hasColumn('restaurant_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Restaurant', array(
             'local' => 'restaurant_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Product as Categories', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}